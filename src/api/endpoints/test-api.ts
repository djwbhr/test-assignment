/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Front Test API
 * –¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
 * OpenAPI spec version: 1.0
 */
import useSwr from "swr";
import type { Key, SWRConfiguration } from "swr";

import type { Fetch200 } from "../model";

import { requestInstance } from "./axios-instance";
import type { ErrorType } from "./axios-instance";

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
 */
export const fetch = () => {
  return requestInstance<Fetch200>({ url: `/fronttemp`, method: "GET" });
};

export const getFetchKey = () => [`/fronttemp`] as const;

export type FetchQueryResult = NonNullable<Awaited<ReturnType<typeof fetch>>>;
export type FetchQueryError = ErrorType<unknown>;

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π
 */
export const useFetch = <TError = ErrorType<unknown>>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof fetch>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getFetchKey() : null));
  const swrFn = () => fetch();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
